import org.ajoberstar.grgit.Grgit

def restApiDocsDir = file('src/main/resources/static/doc/')
def restApiClassesSrcDir = file('src/main/groovy/com/ps/api/blueprint/controllers')
def restApiClassesOutputDir = file('build/classes/main/com/ps/api/blueprint/controllers')

buildscript {
    ext {
        springBootVersion = '1.3.5.RELEASE'
    }
    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/milestone" }
        maven { url 'https://plugins.gradle.org/m2/' }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "io.spring.gradle:dependency-management-plugin:0.5.3.RELEASE"
        classpath "org.ajoberstar:gradle-git:0.10.1"
    }
}

apply plugin: 'groovy'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'spring-boot'
apply plugin: 'io.spring.dependency-management'

sourceCompatibility = 1.7
targetCompatibility = 1.7

jar {
    baseName = 'ps-app-bootstrap'
}

// needed to run tests from gradle with custom -D params
// gradle -Dspring.profiles.active=junit-develop-test clean build
[test, bootRun].each { runTask ->
    configure(runTask) {
        systemProperties System.properties
    }
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
    maven { url 'http://repo.dev.outfittery.de/libs-release-local' }
    maven { url 'http://repo.dev.outfittery.de/libs-snapshot-local' }
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
}

dependencies {

    compile "org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}"
    compile "org.springframework.boot:spring-boot-starter-web:${springBootVersion}"
    compile "org.springframework.boot:spring-boot-starter-data-jpa:${springBootVersion}"
    compile "com.ps:ps-bootservicecommons:0.2.0"
    compile "org.codehaus.groovy:groovy:2.4.6"
    compile "net.logstash.logback:logstash-logback-encoder:4.5.1"
    compile "org.flywaydb:flyway-core:3.2.1"
    compile "joda-time:joda-time:2.8.2"
    compile "commons-io:commons-io:2.4"
    compile "com.fasterxml.jackson.core:jackson-core:2.6.2"
    compile "com.fasterxml.jackson.core:jackson-databind:2.6.2"
    compile "com.fasterxml.jackson.core:jackson-annotations:2.6.2"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-joda:2.6.2"
    compile "com.getsentry.raven:raven-logback:7.2.3"

    runtime "org.postgresql:postgresql:9.4-1205-jdbc41"

    testCompile "org.springframework.boot:spring-boot-starter-test:${springBootVersion}"
    testCompile "org.spockframework:spock-core:1.0-groovy-2.4"
    testCompile "org.spockframework:spock-spring:1.0-groovy-2.4"
    testCompile "cglib:cglib-nodep:3.1"
    testCompile "com.github.tomakehurst:wiremock:1.57"
    testCompile 'com.jayway.restassured:rest-assured:2.6.0'                                 // https://github.com/jayway/rest-assured/wiki/GettingStarted
    testCompile 'com.h2database:h2'
    testCompile 'org.hamcrest:hamcrest-all:1.3'


    testCompile("org.flywaydb.flyway-test-extensions:flyway-spring4-test:3.2.1") {
        exclude group: "org.slf4j"
    }
}

processResources {
    filesMatching("**/application.yml") {
        expand(project.properties)
    }
}

def storeAsPropertyFile = { File dir, File file, Map<String, ?> data ->
    if (!dir.exists()) {
        dir.mkdirs()
    }

    if (!file.exists()) {
        file.createNewFile()
    }

    def props = new Properties()
    props.putAll(data)
    props.store(file.newWriter(), "")
}

/**
 * Generates git.properties file used by custom health endpoint
 */
task generateGitProperties {
    def repo = Grgit.open(project.file('.'))
    def data = [
            "info.git.branch"              : repo.branch.current.name,
            "info.git.commit.id"           : repo.head().id,
            "info.git.commit.user.name"    : repo.head().author.name,
            "info.git.commit.user.email"   : repo.head().author.email,
            "info.git.commit.message.short": repo.head().shortMessage,
            "info.git.commit.time"         : repo.head().time.toString()
    ]

    storeAsPropertyFile(new File(project.buildDir, "resources/main"), new File(project.buildDir, "resources/main/git.properties"), data)
}

/**
 * Generates build.properties file used by custom health endpoint
 */
task generateBuildProperties {
    def data = ["info.build.version": (System.getProperty('version') ?: '?')]
    storeAsPropertyFile(new File(project.buildDir, "resources/main"), new File(project.buildDir, "resources/main/build.properties"), data)
}

/**
 * Task related to ApiDoc generation (http://apidocjs.com/)
 */
task checkChangesOnRestControllers {
    inputs.dir restApiClassesSrcDir
    outputs.dir restApiClassesOutputDir
    doLast { println "changes found" }
}

task deleteApiDocDir(type: Delete) {
    group = 'documentation'
    description = 'Deletes existing api doc dir if newer version is needed'

    dependsOn checkChangesOnRestControllers
    onlyIf {
        restApiDocsDir.exists() && !tasks.checkChangesOnRestControllers.state.upToDate
    }
    delete restApiDocsDir
}

task generateApiDoc(type: Exec) {
    group = 'documentation'
    description = 'Generates the REST API documentation.'

    dependsOn deleteApiDocDir
    onlyIf {
        if (!restApiDocsDir.exists()) {
            println "restApiDocsDir not found, generating rest api docs..."
            return true
        }
        !tasks.checkChangesOnRestControllers.state.upToDate
    }
    executable 'apidoc'
    args = ['-i', restApiClassesSrcDir, '-f', '.groovy', '-o', restApiDocsDir]
}

compileGroovy.dependsOn generateBuildProperties
compileGroovy.dependsOn generateGitProperties
processResources.dependsOn generateApiDoc

task wrapper(type: Wrapper) {
    gradleVersion = '2.9'
}
